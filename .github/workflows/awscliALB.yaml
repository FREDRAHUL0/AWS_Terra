name: Fetch ALB and Target Group Information

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  fetch_alb_and_target_group_info:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Fetch ALB and Target Group Information
        id: fetch_info
        run: |
          # Replace "prod" with the actual value of the server tag key-value pair.
          instance_ids=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=prod" --query "Reservations[*].Instances[*].InstanceId" --output json)

          if [ -z "$instance_ids" ]; then
            echo "No instances found with the provided tag key-value pair."
            exit 1
          fi

          # Find the target group ARN based on the instance IDs
          target_group_arn=$(aws elbv2 describe-target-groups --query "TargetGroups[?contains(Tags[?Key=='Name' && Value=='prod'], 'true')].TargetGroupArn" --output json)

          if [ -z "$target_group_arn" ] || [ "$target_group_arn" == "null" ]; then
            echo "No target group found for the provided tag key-value pair."
            exit 1
          fi

          # Find the load balancers using the target group
          alb_arns=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(TargetGroups[].TargetGroupArn, '$target_group_arn')].{Name: LoadBalancerName, ARN: LoadBalancerArn, DNS: DNSName}" --output json)

          if [ -z "$alb_arns" ] || [ "$alb_arns" == "null" ]; then
            echo "No ALB found using the target group."
            exit 1
          fi

          # Extract listener port and certificate details for HTTPS listeners
          for alb_arn in $(echo "$alb_arns" | jq -r '.[].ARN'); do
              https_listeners=$(aws elbv2 describe-listeners --load-balancer-arn "$alb_arn" --query "Listeners[?Port==\`443\`]" --output json)

              alb_name=$(echo "$alb_arns" | jq -r ".[] | select(.ARN == \"$alb_arn\").Name")
              alb_dns=$(echo "$alb_arns" | jq -r ".[] | select(.ARN == \"$alb_arn\").DNS")
              
              if [ -z "$https_listeners" ] || [ "$https_listeners" == "null" ]; then
                echo "No HTTPS listeners found for ALB $alb_name."
                continue
              fi

              for listener in $(echo "$https_listeners" | jq -c '.[]'); do
                  listener_port=$(echo "$listener" | jq -r '.Port')
                  listener_arn=$(echo "$listener" | jq -r '.ListenerArn')
                  listener_rules=$(aws elbv2 describe-rules --listener-arn "$listener_arn" --query "Rules[*].[Priority, Actions]" --output json)
                  
                  echo "ALB Name: $alb_name, ARN: $alb_arn, DNS: $alb_dns"
                  echo "Listener Port: $listener_port"
                  
                  echo "Listener Rules:"
                  for rule in $(echo "$listener_rules" | jq -c '.[]'); do
                      rule_priority=$(echo "$rule" | jq -r '.[0]')
                      rule_actions=$(echo "$rule" | jq -r '.[1]')
                      echo "  Rule Priority: $rule_priority"
                      echo "  Rule Actions:"
                      for action in $(echo "$rule_actions" | jq -c '.[]'); do
                          action_type=$(echo "$action" | jq -r '.Type')
                          if [ "$action_type" == "forward" ]; then
                              target_group_arn=$(echo "$action" | jq -r '.TargetGroupArn')
                              echo "    Forward to Target Group ARN: $target_group_arn"
                          fi
                      done
                  done
                  
                  echo "Certificate Details:"
                  certificate_arn=$(aws elbv2 describe-listener-certificates --listener-arn "$listener_arn" --query "Certificates[0].CertificateArn" --output json)
                  if [ -z "$certificate_arn" ] || [ "$certificate_arn" == "null" ]; then
                    echo "No certificate found for listener $listener_arn."
                    continue
                  fi
                  
                  certificate_details=$(aws acm describe-certificate --certificate-arn "$certificate_arn" --query "Certificate.[DomainName,SubjectAlternativeNames[],NotBefore,NotAfter]" --output json)
                  echo "$certificate_details"
                  echo ""
                  
                  echo "ALB Members:"
                  targets=$(aws elbv2 describe-target-health --target-group-arn "$target_group_arn" --query "TargetHealthDescriptions[*].[Target.Id, TargetHealth.State]" --output json)
                  for target in $(echo "$targets" | jq -c '.[]'); do
                      target_id=$(echo "$target" | jq -r '.[0]')
                      target_state=$(echo "$target" | jq -r '.[1]')
                      echo "  Target ID: $target_id, State: $target_state"
                  done
                  echo ""
              done
          done
